apiVersion: v1 # Jobs Default K8 API
kind: Pod # This tells kubernetes what kind of class it is working with
metadata:
  name: stimuli-pipeline-jupyter-8889 #
  labels:
    app: stimuli-pipeline-jupyter-8889 # Reference this in your service
spec:
  restartPolicy: Never # Options are OnFailure, and Never.
  hostNetwork: true # This option will allow the pod to use the host network for internet access
  tolerations: # This toleration allows the pod to be schedule onto gpu-only pod machines, remove this if you are not using gpu
    - key: "gpu"
      operator: "Equal"
      value: "true"
      effect: "NoSchedule"
    - key: "personal-pc"
      operator: "Equal"
      value: "true"
      effect: "NoSchedule"
  volumes:
  - name: mnt
    hostPath:
      path: /mnt # Directory on the host machine to be mounted
  - name: code-folder
    hostPath:
      path: /home/donnie/Documents/Repos
  imagePullSecrets:
  - name: docker-credentials
  affinity: # Affinity to select certain nodes with 11GB, 12GB, or 24GB memory
    nodeAffinity:
      requiredDuringSchedulingIgnoredDuringExecution: # Require nodes to have this label
        nodeSelectorTerms:
        - matchExpressions:
          - key: kubernetes.io/hostname # Target label is gpu_mem_size
            operator: In # Key must have one of the following values
            values:
            - donniekim
  containers: # Container Level
  - name: stimuli-pipeline-jupyter-8889 # Container name (Can be set to whatever)
    image: at-docker.ad.bcm.edu:5000/stimulus-pipeline # Docker Image hosted on Docker Hub
    ports:
    - containerPort: 8889
    volumeMounts: # Container reference to volumes define above
    - name: mnt # Name of the volume define above
      mountPath: /mnt # Location of where to mount it in the container
    - name: code-folder
      mountPath: /data
    env: # This section refers to secrets created under the user namespace and set them as enviorment variables
    - name: DJ_HOST
      valueFrom:
        secretKeyRef:
          name: datajoint-credentials
          key: DJ_HOST
    - name: DJ_USER
      valueFrom:
        secretKeyRef:
          name: datajoint-credentials
          key: DJ_USER
    - name: DJ_PASS
      valueFrom:
        secretKeyRef:
          name: datajoint-credentials
          key: DJ_PASS
    - name: GITHUB_USERNAME
      valueFrom:
        secretKeyRef:
          name: github-credentials
          key: GITHUB_USERNAME
    - name: GITHUB_PASSWORD
      valueFrom:
        secretKeyRef:
          name: github-credentials
          key: GITHUB_PASSWORD
    command: ["/bin/bash"] # Entry point for the container
    args: ["-c", "pip3 install jupyter \
    && jupyter notebook --ip='*' --port=8889 --allow-root --no-browser --NotebookApp.token=${GITHUB_PASSWORD}"] # sh commands to clone and run python script

